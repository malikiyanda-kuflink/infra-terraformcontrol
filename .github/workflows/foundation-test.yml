name: foundation-test

on:
  push:
    branches: [ test-git ]
    paths:
      - environments/test-git/foundation/**
      - modules/**
  workflow_dispatch:
    inputs:
      auto_apply:
        description: "Auto-apply when a layer has changes?"
        type: boolean
        default: true
        required: false

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-2
  TF_IN_AUTOMATION: "true"
  TF_STATE_BUCKET: kuflink-test-states
  TF_LOCK_TABLE: kuflink-tf-locks-test
  ROLE_ARN: arn:aws:iam::137167813802:role/kuflink-test-github-oidc-terraform
  TERRAFORM_PATH: "C:\\terraform\\terraform.exe"

jobs:
  foundation:
    name: foundation
    runs-on: [self-hosted, tf-runner]
    permissions: { id-token: write, contents: read }
    env:
      LAYER: foundation
      TF_WORKDIR: environments/test-git/foundation
      TF_STATE_KEY: test-git/foundation/terraform.tfstate
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          & "$env:TERRAFORM_PATH" init `
            -backend-config="bucket=$env:TF_STATE_BUCKET" `
            -backend-config="key=$env:TF_STATE_KEY" `
            -backend-config="region=$env:AWS_REGION" `
            -backend-config="dynamodb_table=$env:TF_LOCK_TABLE" `
            -backend-config="encrypt=true"

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          $exitCode = 0
          try {
            & "$env:TERRAFORM_PATH" plan -no-color -input=false -out=tfplan.bin -detailed-exitcode
            $exitCode = $LASTEXITCODE
          } catch {
            $exitCode = 1
          }
          
          # Set outputs
          if ($exitCode -eq 2) {
            echo "has_changes=true" >> $env:GITHUB_OUTPUT
          } elseif ($exitCode -eq 0) {
            echo "has_changes=false" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "Terraform plan failed"
            exit $exitCode
          }

      - name: Generate Plan Summary
        if: always()
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          if (Test-Path "tfplan.bin") {
            & "$env:TERRAFORM_PATH" show -no-color tfplan.bin > tfplan.txt
            & "$env:TERRAFORM_PATH" show -json tfplan.bin > tfplan.json
            
            # Create summary
            $summary = "## Terraform Plan - $env:LAYER`n`n"
            
            if ("${{ steps.plan.outputs.has_changes }}" -eq "true") {
              $summary += "✅ **Plan successful - has changes**`n`n"
            } else {
              $summary += "✅ **Plan successful - no changes needed**`n`n"
            }
            
            # Add plan details if available
            if (Test-Path "tfplan.json") {
              $plan = Get-Content "tfplan.json" -Raw | ConvertFrom-Json
              if ($plan.resource_changes) {
                $adds = ($plan.resource_changes | Where-Object { $_.change.actions -contains "create" }).Count
                $changes = ($plan.resource_changes | Where-Object { $_.change.actions -contains "update" }).Count
                $deletes = ($plan.resource_changes | Where-Object { $_.change.actions -contains "delete" }).Count
                $summary += "**Changes:** $adds to add, $changes to change, $deletes to destroy`n`n"
              }
            }
            
            $summary += "<details><summary>Full Plan Output</summary>`n`n"
            $summary += "````terraform`n"
            $summary += Get-Content "tfplan.txt" -Raw
            $summary += "`n````"
            $summary += "`n</details>"
            
            $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
          } else {
            "❌ **Plan failed** - check logs above" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
          }

      - name: Upload Plan Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.LAYER }}-${{ github.sha }}
          path: |
            ${{ env.TF_WORKDIR }}/tfplan.bin
            ${{ env.TF_WORKDIR }}/tfplan.txt
            ${{ env.TF_WORKDIR }}/tfplan.json
          retention-days: 7

      - name: Terraform Apply
        if: steps.plan.outputs.has_changes == 'true' && github.event_name == 'workflow_dispatch' && github.event.inputs.auto_apply == 'true'
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          & "$env:TERRAFORM_PATH" apply -input=false -auto-approve tfplan.bin