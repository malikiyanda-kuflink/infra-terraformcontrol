name: foundation-test

on:
  push:
    branches: [ test-git ]
    paths:
      - environments/test-git/foundation/**
      - modules/**
  workflow_dispatch:
    inputs:
      auto_apply:
        description: "Auto-apply when a layer has changes?"
        type: boolean
        default: true
        required: false

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-2
  TF_IN_AUTOMATION: "true"
  TF_STATE_BUCKET: kuflink-test-states
  TF_LOCK_TABLE: kuflink-tf-locks-test
  ROLE_ARN: arn:aws:iam::137167813802:role/kuflink-test-github-oidc-terraform
  TERRAFORM_PATH: "C:\\terraform\\terraform.exe"

jobs:
  foundation:
    name: foundation
    runs-on: [self-hosted, tf-runner]
    permissions: { id-token: write, contents: read }
    env:
      LAYER: foundation
      TF_WORKDIR: environments/test-git/foundation
      TF_STATE_KEY: test-git/foundation/terraform.tfstate

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          & "$env:TERRAFORM_PATH" init `
            -backend-config="bucket=$env:TF_STATE_BUCKET" `
            -backend-config="key=$env:TF_STATE_KEY" `
            -backend-config="region=$env:AWS_REGION" `
            -backend-config="dynamodb_table=$env:TF_LOCK_TABLE" `
            -backend-config="encrypt=true"

      - name: Terraform Plan (detect changes)
        id: plan
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

          # Run plan and capture output; don't fail the step on exit 1
          $planArgs = @('plan','-no-color','-input=false','-out=tfplan.bin','-detailed-exitcode')
          & "$env:TERRAFORM_PATH" @planArgs 1> plan.stdout.txt 2> plan.stderr.txt
          $code = $LASTEXITCODE

          if ($code -eq 2) {
            'has_changes=true'  | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            'plan_ok=true'      | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } elseif ($code -eq 0) {
            'has_changes=false' | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            'plan_ok=true'      | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            'has_changes=false' | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            'plan_ok=false'     | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

          # Render plan views only if the saved plan exists
          if (Test-Path "tfplan.bin") {
            & "$env:TERRAFORM_PATH" show -no-color tfplan.bin > tfplan.txt
            & "$env:TERRAFORM_PATH" show -json     tfplan.bin > tfplan.json
          }

          # Always try to capture current outputs (works even when no changes)
          & "$env:TERRAFORM_PATH" output -json > outputs.json 2>$null

          # Prevent the step from failing the job on exit 1
          $global:LASTEXITCODE = 0
          $host.SetShouldExit(0)

      - name: Summarize plan (changes + safe outputs)
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          $summary = @()
          $summary += "### Plan - $($env:LAYER)"
          $summary += ""
          $summary += "- Plan OK: ${{ steps.plan.outputs.plan_ok }}"
          $summary += "- Changes: ${{ steps.plan.outputs.has_changes }}"

          # If we have a JSON plan, show counts
          if (Test-Path "tfplan.json") {
            $tf = (Get-Content tfplan.json -Raw) | ConvertFrom-Json
            if ($tf.resource_changes) {
              $rc = $tf.resource_changes
              $adds = ($rc | ? { ($_.change.actions -join ',') -eq 'create' }).Count
              $upd  = ($rc | ? { ($_.change.actions -join ',') -eq 'update' }).Count
              $del  = ($rc | ? { ($_.change.actions -join ',') -eq 'delete' }).Count
              $repl = ($rc | ? { ($_.change.actions -contains 'create' -and $_.change.actions -contains 'delete') }).Count
              $summary += "- Adds: $adds, Changes: $upd, Destroys: $del, Replacements: $repl"
            }
            # Planned output changes (if any) and not sensitive
            if ($tf.output_changes) {
              $summary += ""
              $summary += "**Planned Output Changes (non-sensitive):**"
              foreach ($name in $tf.output_changes.PSObject.Properties.Name) {
                $oc = $tf.output_changes.$name
                if ($oc.after_sensitive -ne $true -and $oc.after -ne $null) {
                  $val = $oc.after
                  if ($val -is [array]) { $val = '[' + ($val -join ', ') + ']' }
                  elseif (-not ($val -is [string])) { $val = ($val | ConvertTo-Json -Compress) }
                  $summary += "- $name = $val"
                }
              }
            }
          }

          # Current outputs (works even when no changes); hide sensitive=true
          if (Test-Path "outputs.json") {
            $outs = (Get-Content outputs.json -Raw) | ConvertFrom-Json
            if ($outs) {
              $summary += ""
              $summary += "**Current Outputs (non-sensitive):**"
              foreach ($name in $outs.PSObject.Properties.Name) {
                $o = $outs.$name
                if ($o.sensitive -ne $true) {
                  $val = $o.value
                  if ($val -is [array]) { $val = '[' + ($val -join ', ') + ']' }
                  elseif (-not ($val -is [string])) { $val = ($val | ConvertTo-Json -Compress) }
                  $summary += "- $name = $val"
                }
              }
            }
          }

          # Include full text plan when we have one
          if (Test-Path "tfplan.txt") {
            $t = Get-Content tfplan.txt -Raw
            if ($t.Length -gt 15000) { $t = $t.Substring(0,15000) + "`n... (truncated) ..." }
            $summary += ""
            $summary += "<details><summary>Full text plan (click to expand)</summary>"
            $summary += ""
            $summary += '```'
            $summary += $t
            $summary += '```'
            $summary += "</details>"
          }

          $summary -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tfplan-${{ env.LAYER }}-${{ github.sha }}
          path: |
            ${{ env.TF_WORKDIR }}/tfplan.bin
            ${{ env.TF_WORKDIR }}/tfplan.txt
            ${{ env.TF_WORKDIR }}/tfplan.json
            ${{ env.TF_WORKDIR }}/plan.stdout.txt
            ${{ env.TF_WORKDIR }}/plan.stderr.txt
            ${{ env.TF_WORKDIR }}/outputs.json
          if-no-files-found: warn
          retention-days: 7

      - name: Terraform Apply (only if changes)
        if: steps.plan.outputs.plan_ok == 'true' && steps.plan.outputs.has_changes == 'true' && github.event_name == 'workflow_dispatch' && github.event.inputs.auto_apply == 'true'
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          & "$env:TERRAFORM_PATH" apply -input=false -auto-approve tfplan.bin
