name: apps-test

on:
  pull_request:
    branches: [ test-git ]
    paths:
      - environments/test-git/apps/**
      - modules/s3-frontend/**
      - modules/s3-admin/**
      - modules/eb-api/**
      - modules/ec2-bastion/**
      - modules/ec2-test/**
      - modules/ec2-metabase/**
      # - modules/ec2-airflow/**
      # - modules/ec2-21finance/**
      # - modules/ec2-kuflink/**
      # - modules/ec2-backupscript/**
      # - modules/ec2-keitaro/**
      # - modules/ec2-openbankking/**
      # push:
      #   branches: [ test-git ]
      #   paths:
      #     - environments/test-git/apps/**
      #     - modules/s3-frontend/**
      #     - modules/s3-admin/**
      #     - modules/eb-api/**
      #     - modules/ec2-bastion/**
      #     - modules/ec2-test/**
      #     - modules/ec2-metabase/**
      #     # - modules/ec2-airflow/**
      #     # - modules/ec2-21finance/**
      #     # - modules/ec2-kuflink/**
      #     # - modules/ec2-backupscript/**
      #     # - modules/ec2-keitaro/**
      #     # - modules/ec2-openbankking/**
  workflow_call:   
    inputs:
      triggered_by_dependency:
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      auto_apply:
        description: "Auto-apply when a layer has changes?"
        type: boolean
        default: true
        required: false

concurrency:
  group: terraform-test-git-apps-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-2
  TF_IN_AUTOMATION: "true"
  TF_STATE_BUCKET: kuflink-test-states
  TF_LOCK_TABLE: kuflink-tf-locks-test
  ROLE_ARN: arn:aws:iam::137167813802:role/kuflink-test-github-oidc-terraform
  TERRAFORM_PATH: "C:\\terraform\\terraform.exe"

jobs:
  apps:
    name: apps
    runs-on: [self-hosted, tf-runner]
    permissions: { id-token: write, contents: read }
    env:
      LAYER: apps
      TF_WORKDIR: environments/test-git/apps
      TF_STATE_KEY: test-git/apps/terraform.tfstate
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          & "$env:TERRAFORM_PATH" init `
            -backend-config="bucket=$env:TF_STATE_BUCKET" `
            -backend-config="key=$env:TF_STATE_KEY" `
            -backend-config="region=$env:AWS_REGION" `
            -backend-config="dynamodb_table=$env:TF_LOCK_TABLE" `
            -backend-config="encrypt=true"

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          $exitCode = 0
          try {
            $planArgs = @('plan', '-no-color', '-input=false', '-out=tfplan.bin', '-detailed-exitcode')
            & "$env:TERRAFORM_PATH" @planArgs
            $exitCode = $LASTEXITCODE
          } catch {
            Write-Host "Exception during terraform plan: $($_.Exception.Message)" -ForegroundColor Red
            $exitCode = 1
          }

          Write-Host "Terraform plan exit code: $exitCode" -ForegroundColor Yellow

          if ($exitCode -eq 2) {
            Write-Host "Plan has changes" -ForegroundColor Green
            "has_changes=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 0
          } elseif ($exitCode -eq 0) {
            Write-Host "Plan has no changes" -ForegroundColor Green
            "has_changes=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 0
          } else {
            Write-Host "Plan failed with exit code $exitCode" -ForegroundColor Red
            "has_changes=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 1
          }

      - name: Generate Plan Summary
        if: always()
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          $summary = @()

          if (Test-Path "tfplan.bin") {
            & "$env:TERRAFORM_PATH" show -no-color tfplan.bin > tfplan.txt
            & "$env:TERRAFORM_PATH" show -json tfplan.bin > tfplan.json

            $summary += "## Terraform Plan - $env:LAYER"
            $summary += ""

            if ("${{ steps.plan.outputs.has_changes }}" -eq "true") {
              $summary += "Plan successful - has changes"
            } else {
              $summary += "Plan successful - no changes needed"
            }

            if (Test-Path "tfplan.json") {
              $plan = Get-Content "tfplan.json" -Raw | ConvertFrom-Json
              if ($plan.resource_changes) {
                $adds    = ($plan.resource_changes | Where-Object { $_.change.actions -contains "create" }).Count
                $changes = ($plan.resource_changes | Where-Object { $_.change.actions -contains "update" }).Count
                $deletes = ($plan.resource_changes | Where-Object { $_.change.actions -contains "delete" }).Count
                $summary += ""
                $summary += "**Resource Changes:**"
                $summary += "- Add: $adds"
                $summary += "- Change: $changes"
                $summary += "- Delete: $deletes"
              }
            }
          } else {
            $summary += "## Terraform Plan Failed"
            $summary += ""
            $summary += "Plan failed - check terraform logs in previous step"
          }

          $summaryText = $summary -join "`r`n"
          Set-Content -Path $env:GITHUB_STEP_SUMMARY -Value $summaryText -Encoding UTF8

      - name: Upload Plan Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.LAYER }}-${{ github.sha }}
          path: |
            ${{ env.TF_WORKDIR }}/tfplan.bin
            ${{ env.TF_WORKDIR }}/tfplan.txt
            ${{ env.TF_WORKDIR }}/tfplan.json
          if-no-files-found: warn
          retention-days: 7

      # ⬇️ Apply only after merge (i.e., push to the base branch)
      - name: Terraform Apply
        if: steps.plan.outputs.has_changes == 'true' &&
            github.event_name == 'push' &&
            github.ref == 'refs/heads/test-git'
        working-directory: ${{ env.TF_WORKDIR }}
        shell: powershell
        run: |
          & "$env:TERRAFORM_PATH" apply -input=false -auto-approve tfplan.bin
