name: tf-destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - test
          - staging
          # - production  # Uncomment only if you really need this
      layers:
        description: 'Layers to destroy (comma-separated: foundation,platform,data,apps or "all")'
        required: true
        default: 'all'
      confirm_destroy:
        description: 'Type "DESTROY" to confirm (case-sensitive)'
        required: true
      auto_approve:
        description: 'Skip destroy plan approval (NOT recommended for staging/production)'
        type: boolean
        default: false
      force_continue_on_failure:
        description: '‚ö†Ô∏è Continue destroying next layers even if previous fails (DANGEROUS!)'
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-destroy-${{ github.event.inputs.environment }}
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-2
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

jobs:
  validate-destroy:
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
      role_arn: ${{ steps.check.outputs.role_arn }}
      state_bucket: ${{ steps.check.outputs.state_bucket }}
      lock_table: ${{ steps.check.outputs.lock_table }}
      layers_to_destroy: ${{ steps.check.outputs.layers_to_destroy }}
    steps:
      - name: Validate Confirmation
        id: check
        run: |
          # Validate confirmation text
          if [[ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]]; then
            echo "‚ùå Confirmation text must be exactly 'DESTROY'"
            exit 1
          fi
          
          # Set environment-specific values
          ENV="${{ github.event.inputs.environment }}"
          case "$ENV" in
            test)
              ROLE="arn:aws:iam::137167813802:role/kuflink-test-github-oidc-terraform"
              STATE_BUCKET="kuflink-test-states"
              LOCK_TABLE="kuflink-tf-locks-test"
              ;;
            staging)
              ROLE="arn:aws:iam::222222222222:role/kuflink-staging-github-oidc-terraform"
              STATE_BUCKET="kuflink-staging-states"
              LOCK_TABLE="kuflink-tf-locks-staging"
              ;;
            production)
              ROLE="arn:aws:iam::333333333333:role/kuflink-prod-github-oidc-terraform"
              STATE_BUCKET="kuflink-prod-states"
              LOCK_TABLE="kuflink-tf-locks-prod"
              ;;
          esac
          
          echo "role_arn=$ROLE" >> $GITHUB_OUTPUT
          echo "state_bucket=$STATE_BUCKET" >> $GITHUB_OUTPUT
          echo "lock_table=$LOCK_TABLE" >> $GITHUB_OUTPUT
          
          # Parse layers
          LAYERS_INPUT="${{ github.event.inputs.layers }}"
          if [[ "$LAYERS_INPUT" == "all" ]]; then
            # Reverse order for destroy: apps -> data -> platform -> foundation
            LAYERS_JSON='["apps","data","platform","foundation"]'
          else
            # Parse comma-separated and reverse
            IFS=',' read -ra LAYER_ARRAY <<< "$LAYERS_INPUT"
            # Reverse the array
            REVERSED=()
            for ((i=${#LAYER_ARRAY[@]}-1; i>=0; i--)); do
              REVERSED+=("${LAYER_ARRAY[i]}")
            done
            LAYERS_JSON=$(printf '%s\n' "${REVERSED[@]}" | jq -R . | jq -sc .)
          fi
          
          echo "layers_to_destroy=$LAYERS_JSON" >> $GITHUB_OUTPUT
          echo "can_proceed=true" >> $GITHUB_OUTPUT
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üéØ Environment: $ENV"
          echo "üóëÔ∏è  Layers to destroy (in order): $LAYERS_JSON"
          if [[ "${{ github.event.inputs.force_continue_on_failure }}" == "true" ]]; then
            echo "‚ö†Ô∏è  FORCE CONTINUE ENABLED - will continue even if layers fail!"
          fi
          echo "‚ö†Ô∏è  THIS ACTION IS IRREVERSIBLE!"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

  # Destroy jobs in REVERSE order: apps -> data -> platform -> foundation
  
  destroy-apps:
    needs: validate-destroy
    if: contains(fromJson(needs.validate-destroy.outputs.layers_to_destroy), 'apps')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      ROLE_ARN: ${{ needs.validate-destroy.outputs.role_arn }}
      LAYER: apps
      AWS_REGION: ${{ vars.AWS_REGION }}
      TF_STATE_BUCKET: ${{ needs.validate-destroy.outputs.state_bucket }}
      TF_LOCK_TABLE: ${{ needs.validate-destroy.outputs.lock_table }}
    outputs:
      status: ${{ steps.final_status.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_wrapper: false }
      
      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/${LAYER}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
      
      - name: Terraform Destroy Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          terraform plan -destroy -out=destroy.tfplan -var="environment=${ENVIRONMENT}"
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Show Destroy Plan
        if: steps.plan.outcome == 'success'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: terraform show destroy.tfplan
      
      - name: Terraform Destroy (Attempt 1)
        id: destroy_attempt1
        if: |
          steps.plan.outcome == 'success' &&
          (github.event.inputs.auto_approve == 'true' || github.event.inputs.environment == 'test')
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          terraform apply -auto-approve destroy.tfplan
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Wait Before Retry
        if: steps.destroy_attempt1.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è First destroy attempt failed. Waiting 30 seconds before retry..."
          sleep 30
      
      - name: Refresh State and Retry Destroy
        id: destroy_attempt2
        if: steps.destroy_attempt1.outcome == 'failure'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          echo "üîÑ Refreshing state and retrying destroy..."
          terraform refresh -var="environment=${ENVIRONMENT}" || true
          terraform destroy -auto-approve -var="environment=${ENVIRONMENT}"
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Final Status Check
        id: final_status
        if: always()
        run: |
          if [[ "${{ steps.destroy_attempt2.outcome }}" == "success" ]]; then
            echo "‚úÖ Apps layer destroyed successfully on retry"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ steps.destroy_attempt1.outcome }}" == "success" ]]; then
            echo "‚úÖ Apps layer destroyed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ github.event.inputs.force_continue_on_failure }}" == "true" ]]; then
            echo "‚ö†Ô∏è Apps layer destroy FAILED but force-continue is enabled"
            echo "status=failed_forced" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "‚ùå Apps layer destroy failed after retries"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "::error::Apps layer destroy failed. Review logs and manually clean up if needed."
            exit 1
          fi

  destroy-data:
    needs: [validate-destroy, destroy-apps]
    if: |
      ((!failure() && !cancelled()) || github.event.inputs.force_continue_on_failure == 'true') &&
      contains(fromJson(needs.validate-destroy.outputs.layers_to_destroy), 'data')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      ROLE_ARN: ${{ needs.validate-destroy.outputs.role_arn }}
      LAYER: data
      AWS_REGION: ${{ vars.AWS_REGION }}
      TF_STATE_BUCKET: ${{ needs.validate-destroy.outputs.state_bucket }}
      TF_LOCK_TABLE: ${{ needs.validate-destroy.outputs.lock_table }}
    outputs:
      status: ${{ steps.final_status.outputs.status }}
    steps:
      - name: Check Previous Layer Status
        if: needs.destroy-apps.outputs.status == 'failed_forced'
        run: |
          echo "::warning::‚ö†Ô∏è Previous layer (apps) failed but continuing due to force flag"
      
      - uses: actions/checkout@v4
      
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_wrapper: false }
      
      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/${LAYER}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
      
      - name: Terraform Destroy Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          terraform plan -destroy -out=destroy.tfplan -var="environment=${ENVIRONMENT}"
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Show Destroy Plan
        if: steps.plan.outcome == 'success'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: terraform show destroy.tfplan
      
      - name: Terraform Destroy (Attempt 1)
        id: destroy_attempt1
        if: |
          steps.plan.outcome == 'success' &&
          (github.event.inputs.auto_approve == 'true' || github.event.inputs.environment == 'test')
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          terraform apply -auto-approve destroy.tfplan
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Wait Before Retry
        if: steps.destroy_attempt1.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è First destroy attempt failed. Waiting 30 seconds before retry..."
          sleep 30
      
      - name: Refresh State and Retry Destroy
        id: destroy_attempt2
        if: steps.destroy_attempt1.outcome == 'failure'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          echo "üîÑ Refreshing state and retrying destroy..."
          terraform refresh -var="environment=${ENVIRONMENT}" || true
          terraform destroy -auto-approve -var="environment=${ENVIRONMENT}"
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Final Status Check
        id: final_status
        if: always()
        run: |
          if [[ "${{ steps.destroy_attempt2.outcome }}" == "success" ]]; then
            echo "‚úÖ Data layer destroyed successfully on retry"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ steps.destroy_attempt1.outcome }}" == "success" ]]; then
            echo "‚úÖ Data layer destroyed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ github.event.inputs.force_continue_on_failure }}" == "true" ]]; then
            echo "‚ö†Ô∏è Data layer destroy FAILED but force-continue is enabled"
            echo "status=failed_forced" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "‚ùå Data layer destroy failed after retries"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "::error::Data layer destroy failed. Review logs and manually clean up if needed."
            exit 1
          fi

  destroy-platform:
    needs: [validate-destroy, destroy-data]
    if: |
      ((!failure() && !cancelled()) || github.event.inputs.force_continue_on_failure == 'true') &&
      contains(fromJson(needs.validate-destroy.outputs.layers_to_destroy), 'platform')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      ROLE_ARN: ${{ needs.validate-destroy.outputs.role_arn }}
      LAYER: platform
      AWS_REGION: ${{ vars.AWS_REGION }}
      TF_STATE_BUCKET: ${{ needs.validate-destroy.outputs.state_bucket }}
      TF_LOCK_TABLE: ${{ needs.validate-destroy.outputs.lock_table }}
    outputs:
      status: ${{ steps.final_status.outputs.status }}
    steps:
      - name: Check Previous Layer Status
        if: needs.destroy-data.outputs.status == 'failed_forced'
        run: |
          echo "::warning::‚ö†Ô∏è Previous layer (data) failed but continuing due to force flag"
      
      - uses: actions/checkout@v4
      
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_wrapper: false }
      
      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/${LAYER}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
      
      - name: Terraform Destroy Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          terraform plan -destroy -out=destroy.tfplan -var="environment=${ENVIRONMENT}"
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Show Destroy Plan
        if: steps.plan.outcome == 'success'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: terraform show destroy.tfplan
      
      - name: Terraform Destroy (Attempt 1)
        id: destroy_attempt1
        if: |
          steps.plan.outcome == 'success' &&
          (github.event.inputs.auto_approve == 'true' || github.event.inputs.environment == 'test')
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          terraform apply -auto-approve destroy.tfplan
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Wait Before Retry
        if: steps.destroy_attempt1.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è First destroy attempt failed. Waiting 30 seconds before retry..."
          sleep 30
      
      - name: Refresh State and Retry Destroy
        id: destroy_attempt2
        if: steps.destroy_attempt1.outcome == 'failure'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          echo "üîÑ Refreshing state and retrying destroy..."
          terraform refresh -var="environment=${ENVIRONMENT}" || true
          terraform destroy -auto-approve -var="environment=${ENVIRONMENT}"
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Final Status Check
        id: final_status
        if: always()
        run: |
          if [[ "${{ steps.destroy_attempt2.outcome }}" == "success" ]]; then
            echo "‚úÖ Platform layer destroyed successfully on retry"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ steps.destroy_attempt1.outcome }}" == "success" ]]; then
            echo "‚úÖ Platform layer destroyed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ github.event.inputs.force_continue_on_failure }}" == "true" ]]; then
            echo "‚ö†Ô∏è Platform layer destroy FAILED but force-continue is enabled"
            echo "status=failed_forced" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "‚ùå Platform layer destroy failed after retries"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "::error::Platform layer destroy failed. Review logs and manually clean up if needed."
            exit 1
          fi

  destroy-foundation:
    needs: [validate-destroy, destroy-platform]
    if: |
      ((!failure() && !cancelled()) || github.event.inputs.force_continue_on_failure == 'true') &&
      contains(fromJson(needs.validate-destroy.outputs.layers_to_destroy), 'foundation')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      ROLE_ARN: ${{ needs.validate-destroy.outputs.role_arn }}
      LAYER: foundation
      AWS_REGION: ${{ vars.AWS_REGION }}
      TF_STATE_BUCKET: ${{ needs.validate-destroy.outputs.state_bucket }}
      TF_LOCK_TABLE: ${{ needs.validate-destroy.outputs.lock_table }}
    outputs:
      status: ${{ steps.final_status.outputs.status }}
    steps:
      - name: Check Previous Layer Status
        if: needs.destroy-platform.outputs.status == 'failed_forced'
        run: |
          echo "::warning::‚ö†Ô∏è Previous layer (platform) failed but continuing due to force flag"
      
      - uses: actions/checkout@v4
      
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_wrapper: false }
      
      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/${LAYER}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
      
      - name: Terraform Destroy Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          terraform plan -destroy -out=destroy.tfplan -var="environment=${ENVIRONMENT}"
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Show Destroy Plan
        if: steps.plan.outcome == 'success'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: terraform show destroy.tfplan
      
      - name: Terraform Destroy (Attempt 1)
        id: destroy_attempt1
        if: |
          steps.plan.outcome == 'success' &&
          (github.event.inputs.auto_approve == 'true' || github.event.inputs.environment == 'test')
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          terraform apply -auto-approve destroy.tfplan
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Wait Before Retry
        if: steps.destroy_attempt1.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è First destroy attempt failed. Waiting 30 seconds before retry..."
          sleep 30
      
      - name: Refresh State and Retry Destroy
        id: destroy_attempt2
        if: steps.destroy_attempt1.outcome == 'failure'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          echo "üîÑ Refreshing state and retrying destroy..."
          terraform refresh -var="environment=${ENVIRONMENT}" || true
          terraform destroy -auto-approve -var="environment=${ENVIRONMENT}"
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Final Status Check
        id: final_status
        if: always()
        run: |
          if [[ "${{ steps.destroy_attempt2.outcome }}" == "success" ]]; then
            echo "‚úÖ Foundation layer destroyed successfully on retry"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ steps.destroy_attempt1.outcome }}" == "success" ]]; then
            echo "‚úÖ Foundation layer destroyed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [[ "${{ github.event.inputs.force_continue_on_failure }}" == "true" ]]; then
            echo "‚ö†Ô∏è Foundation layer destroy FAILED but force-continue is enabled"
            echo "status=failed_forced" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "‚ùå Foundation layer destroy failed after retries"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "::error::Foundation layer destroy failed. Review logs and manually clean up if needed."
            exit 1
          fi

  summary:
    needs: [validate-destroy, destroy-apps, destroy-data, destroy-platform, destroy-foundation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Summary
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä DESTROY WORKFLOW SUMMARY"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo ""
          
          # Apps status
          if [[ "${{ contains(fromJson(needs.validate-destroy.outputs.layers_to_destroy), 'apps') }}" == "true" ]]; then
            if [[ "${{ needs.destroy-apps.outputs.status }}" == "success" ]]; then
              echo "‚úÖ Apps: Destroyed successfully"
            elif [[ "${{ needs.destroy-apps.outputs.status }}" == "failed_forced" ]]; then
              echo "‚ö†Ô∏è Apps: FAILED but continued due to force flag"
            else
              echo "‚ùå Apps: Failed to destroy"
            fi
          fi
          
          # Data status
          if [[ "${{ contains(fromJson(needs.validate-destroy.outputs.layers_to_destroy), 'data') }}" == "true" ]]; then
            if [[ "${{ needs.destroy-data.outputs.status }}" == "success" ]]; then
              echo "‚úÖ Data: Destroyed successfully"
            elif [[ "${{ needs.destroy-data.outputs.status }}" == "failed_forced" ]]; then
              echo "‚ö†Ô∏è Data: FAILED but continued due to force flag"
            elif [[ "${{ needs.destroy-data.result }}" == "skipped" ]]; then
              echo "‚è≠Ô∏è Data: Skipped (previous layer failed)"
            else
              echo "‚ùå Data: Failed to destroy"
            fi
          fi
          
          # Platform status
          if [[ "${{ contains(fromJson(needs.validate-destroy.outputs.layers_to_destroy), 'platform') }}" == "true" ]]; then
            if [[ "${{ needs.destroy-platform.outputs.status }}" == "success" ]]; then
              echo "‚úÖ Platform: Destroyed successfully"
            elif [[ "${{ needs.destroy-platform.outputs.status }}" == "failed_forced" ]]; then
              echo "‚ö†Ô∏è Platform: FAILED but continued due to force flag"
            elif [[ "${{ needs.destroy-platform.result }}" == "skipped" ]]; then
              echo "‚è≠Ô∏è Platform: Skipped (previous layer failed)"
            else
              echo "‚ùå Platform: Failed to destroy"
            fi
          fi
          
          # Foundation status
          if [[ "${{ contains(fromJson(needs.validate-destroy.outputs.layers_to_destroy), 'foundation') }}" == "true" ]]; then
            if [[ "${{ needs.destroy-foundation.outputs.status }}" == "success" ]]; then
              echo "‚úÖ Foundation: Destroyed successfully"
            elif [[ "${{ needs.destroy-foundation.outputs.status }}" == "failed_forced" ]]; then
              echo "‚ö†Ô∏è Foundation: FAILED but continued due to force flag"
            elif [[ "${{ needs.destroy-foundation.result }}" == "skipped" ]]; then
              echo "‚è≠Ô∏è Foundation: Skipped (previous layer failed)"
            else
              echo "‚ùå Foundation: Failed to destroy"
            fi
          fi
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          # Overall status
          if [[ "${{ github.event.inputs.force_continue_on_failure }}" == "true" ]]; then
            echo "‚ö†Ô∏è Force-continue was enabled. Check individual layer statuses above."
            echo "‚ö†Ô∏è Manual cleanup may be required for failed layers."
          fi