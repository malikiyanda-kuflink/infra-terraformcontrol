name: tf-plan-and-apply

on:
  pull_request:
    branches: [ main ]
  push:
    tags:
      - 'v*-test'
      - 'v*-staging'
      - 'v*-prod'

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-2
  TF_IN_AUTOMATION: "true"
  TF_STATE_BUCKET: kuflink-states
  TF_LOCK_TABLE: kuflink-tf-locks

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.parse.outputs.environment }}        # test|staging|production
      role_arn: ${{ steps.parse.outputs.role_arn }}
      is_deploy: ${{ steps.parse.outputs.is_deploy }}            # true on tag pushes
      layers_json: ${{ steps.detect.outputs.layers_json }}        # compact JSON array
    steps:
      - name: Parse Environment from Tag (or fall back to PR/test)
        id: parse
        shell: bash
        run: |
          ref="${GITHUB_REF}"
          # Defaults for PRs → validate against test env
          ENV_SLUG="test"
          IS_DEPLOY="false"
          ROLE="arn:aws:iam::137167813802:role/kuflink-test-github-oidc-terraform"

          if [[ "$ref" =~ refs/tags/v.*-(test|staging|prod)$ ]]; then
            case "${BASH_REMATCH[1]}" in
              test)    ENV_SLUG="test";       ROLE="arn:aws:iam::137167813802:role/kuflink-test-github-oidc-terraform" ;;
              staging) ENV_SLUG="staging";    ROLE="arn:aws:iam::222222222222:role/kuflink-staging-github-oidc-terraform" ;;
              prod)    ENV_SLUG="production"; ROLE="arn:aws:iam::333333333333:role/kuflink-prod-github-oidc-terraform" ;;
            esac
            IS_DEPLOY="true"
          fi

          echo "environment=$ENV_SLUG"   >> $GITHUB_OUTPUT
          echo "is_deploy=$IS_DEPLOY"    >> $GITHUB_OUTPUT
          echo "role_arn=$ROLE"          >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
            fetch-depth: 0  # need history for diffs

      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Detect Changed Layers (env-nested, ordered)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          ENV_SLUG="${{ steps.parse.outputs.environment }}"

          # Determine changed files for PR vs tag push
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch --no-tags origin "${{ github.base_ref }}" --depth=1
            CHANGED="$(git diff --name-only "origin/${{ github.base_ref }}"...HEAD || true)"
          else
            if git rev-parse -q --verify HEAD^ >/dev/null; then
              CHANGED="$(git diff --name-only HEAD^ HEAD || true)"
            else
              CHANGED="$(git ls-tree -r --name-only HEAD || true)"
            fi
          fi

          echo "Changed files:"; printf "%s\n" "$CHANGED"

          need_foundation=false
          need_platform=false
          need_data=false
          need_apps=false

          # Match changes inside the env/layer dirs
          while IFS= read -r f; do
            [[ -z "$f" ]] && continue

            if [[ "$f" =~ ^environments/${ENV_SLUG}/foundation/ ]]; then need_foundation=true; fi
            if [[ "$f" =~ ^environments/${ENV_SLUG}/platform/   ]]; then need_platform=true;   fi
            if [[ "$f" =~ ^environments/${ENV_SLUG}/data/       ]]; then need_data=true;       fi
            if [[ "$f" =~ ^environments/${ENV_SLUG}/apps/       ]]; then need_apps=true;       fi

            # Module → layer mapping
            if [[ "$f" =~ ^modules/vpc/|^modules/iam/|^modules/parameter-store/ ]]; then need_foundation=true; fi
            if [[ "$f" =~ ^modules/eb-waf/|^modules/s3-admin-waf/ ]]; then need_platform=true; fi
            if [[ "$f" =~ ^modules/rds/|^modules/rds-restored/|^modules/redshift/|^modules/redshift-restored/|^modules/dms-mysql-to-redshift/|^modules/elastic-cache-redis/ ]]; then need_data=true; fi
            if [[ "$f" =~ ^modules/ec2-|^modules/s3-admin/|^modules/s3-frontend/|^modules/eb-api/ ]]; then need_apps=true; fi
          done <<< "$CHANGED"

          # Build ordered list: foundation → platform → data → apps
          LAYERS=()
          $need_foundation && LAYERS+=("foundation")
          $need_platform   && LAYERS+=("platform")
          $need_data       && LAYERS+=("data")
          $need_apps       && LAYERS+=("apps")

          # On tag deploy, if nothing matched, run all layers for that env
          if [[ ${#LAYERS[@]} -eq 0 && "${{ steps.parse.outputs.is_deploy }}" == "true" ]]; then
            LAYERS=("foundation" "platform" "data" "apps")
          fi

          # Compact JSON for GITHUB_OUTPUT (single line)
          JSON=$(printf '%s\n' "${LAYERS[@]}" | jq -R . | jq -sc .)
          echo "layers_json=$JSON" >> "$GITHUB_OUTPUT"
          echo "Detected layers: $JSON"

  terraform-plan-apply:
    needs: detect-environment
    if: needs.detect-environment.outputs.layers_json != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        layer: ${{ fromJson(needs.detect-environment.outputs.layers_json) }}
    env:
      ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}   # test|staging|production
      ROLE_ARN:  ${{ needs.detect-environment.outputs.role_arn }}
      IS_DEPLOY: ${{ needs.detect-environment.outputs.is_deploy }}
      LAYER:     ${{ matrix.layer }}
      AWS_REGION: ${{ env.AWS_REGION }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        shell: bash
        run: |
          if [[ -f backend.tf ]]; then
            terraform init
          elif [[ -f "backend-${ENVIRONMENT}.tfbackend" ]]; then
            terraform init -backend-config="backend-${ENVIRONMENT}.tfbackend"
          else
            echo "No backend config found in $(pwd). Add backend.tf or backend-${ENVIRONMENT}.tfbackend"
            exit 1
          fi

      - name: Terraform Format Check
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        shell: bash
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        shell: bash
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        shell: bash
        continue-on-error: true
        run: |
          set +e
          terraform plan -no-color -out=tfplan.bin -detailed-exitcode -var="environment=${ENVIRONMENT}"
          code=$?
          echo "exit_code=$code" >> $GITHUB_OUTPUT
          if [ "$code" -eq 2 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$code" -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          else
            exit "$code"
          fi

      - name: Upload Plan Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.ENVIRONMENT }}-${{ env.LAYER }}
          path: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}/tfplan.bin
          if-no-files-found: ignore

      - name: Terraform Apply (only on tag deploys and when changes)
        if: env.IS_DEPLOY == 'true' && steps.plan.outputs.has_changes == 'true'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        shell: bash
        run: terraform apply -auto-approve tfplan.bin
