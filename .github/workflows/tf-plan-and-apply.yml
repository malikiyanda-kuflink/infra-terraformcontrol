name: tf-plan-and-apply

on:
  pull_request:
    branches: [ main ]
  push:
    tags:
      - 'v*-test'
      - 'v*-staging'
      - 'v*-prod'

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-2
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_STATE_BUCKET: kuflink-test-states
  TF_LOCK_TABLE: kuflink-tf-locks-test

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.parse.outputs.environment }}
      role_arn: ${{ steps.parse.outputs.role_arn }}
      is_deploy: ${{ steps.parse.outputs.is_deploy }}
      layers_json: ${{ steps.detect.outputs.layers_json }}
      
    steps:
      - name: Parse Environment from Tag (or fall back to PR/test)
        id: parse
        shell: bash
        run: |
          ref="${GITHUB_REF}"
          ENV_SLUG="test"
          IS_DEPLOY="false"
          ROLE="arn:aws:iam::137167813802:role/kuflink-test-github-oidc-terraform"

          if [[ "$ref" =~ refs/tags/v.*-(test|staging|prod)$ ]]; then
            case "${BASH_REMATCH[1]}" in
              test)    ENV_SLUG="test";       ROLE="arn:aws:iam::137167813802:role/kuflink-test-github-oidc-terraform" ;;
              staging) ENV_SLUG="staging";    ROLE="arn:aws:iam::222222222222:role/kuflink-staging-github-oidc-terraform" ;;
              prod)    ENV_SLUG="production"; ROLE="arn:aws:iam::333333333333:role/kuflink-prod-github-oidc-terraform" ;;
            esac
            IS_DEPLOY="true"
          fi

          echo "environment=$ENV_SLUG" >> $GITHUB_OUTPUT
          echo "is_deploy=$IS_DEPLOY"  >> $GITHUB_OUTPUT
          echo "role_arn=$ROLE"        >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Detect Changed Layers
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          ENV_SLUG="${{ steps.parse.outputs.environment }}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch --no-tags origin "${{ github.base_ref }}" --depth=1
            CHANGED="$(git diff --name-only "origin/${{ github.base_ref }}"...HEAD || true)"
          else
            if git rev-parse -q --verify HEAD^ >/dev/null; then
              CHANGED="$(git diff --name-only HEAD^ HEAD || true)"
            else
              CHANGED="$(git ls-tree -r --name-only HEAD || true)"
            fi
          fi

          echo "Changed files:"; printf "%s\n" "$CHANGED"

          need_foundation=false
          need_platform=false
          need_data=false
          need_apps=false

          while IFS= read -r f; do
            [[ -z "$f" ]] && continue

            if [[ "$f" =~ ^environments/${ENV_SLUG}/foundation/ ]]; then need_foundation=true; fi
            if [[ "$f" =~ ^environments/${ENV_SLUG}/platform/   ]]; then need_platform=true;   fi
            if [[ "$f" =~ ^environments/${ENV_SLUG}/data/       ]]; then need_data=true;       fi
            if [[ "$f" =~ ^environments/${ENV_SLUG}/apps/       ]]; then need_apps=true;       fi

            if [[ "$f" =~ ^modules/vpc/|^modules/iam/|^modules/parameter-store/ ]]; then need_foundation=true; fi
            if [[ "$f" =~ ^modules/eb-waf/|^modules/s3-admin-waf/ ]]; then need_platform=true; fi
            if [[ "$f" =~ ^modules/rds/|^modules/rds-restored/|^modules/redshift/|^modules/redshift-restored/|^modules/dms-mysql-to-redshift/|^modules/elastic-cache-redis/ ]]; then need_data=true; fi
            if [[ "$f" =~ ^modules/ec2-|^modules/s3-admin/|^modules/s3-frontend/|^modules/eb-api/ ]]; then need_apps=true; fi
          done <<< "$CHANGED"

          LAYERS=()
          $need_foundation && LAYERS+=("foundation")
          $need_platform   && LAYERS+=("platform")
          $need_data       && LAYERS+=("data")
          $need_apps       && LAYERS+=("apps")

          if [[ ${#LAYERS[@]} -eq 0 && "${{ steps.parse.outputs.is_deploy }}" == "true" ]]; then
            LAYERS=("foundation" "platform" "data" "apps")
          fi

          JSON=$(printf '%s\n' "${LAYERS[@]}" | jq -R . | jq -sc .)
          echo "layers_json=$JSON" >> "$GITHUB_OUTPUT"
          echo "Detected layers: $JSON"

  # Foundation Layer
  foundation:
    name: Foundation
    needs: detect-environment
    if: contains(fromJson(needs.detect-environment.outputs.layers_json), 'foundation')
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}
      ROLE_ARN:    ${{ needs.detect-environment.outputs.role_arn }}
      IS_DEPLOY:   ${{ needs.detect-environment.outputs.is_deploy }}
      LAYER:       foundation
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_wrapper: false
      
      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/${LAYER}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
      
      - name: Terraform Fmt & Validate
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform fmt -check -recursive
          terraform validate
      
      - name: Terraform Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          set +e
          terraform plan -no-color -out=tfplan.bin -detailed-exitcode
          code=$?
          echo "exit_code=$code" >> $GITHUB_OUTPUT
          
          if [ "$code" -eq 2 ]; then 
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$code" -eq 0 ]; then 
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          else 
            exit "$code"
          fi
      
      - name: Upload Plan
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.ENVIRONMENT }}-${{ env.LAYER }}
          path: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}/tfplan.bin
          if-no-files-found: ignore
          retention-days: 30
      
      - name: Terraform Apply
        if: env.IS_DEPLOY == 'true' && steps.plan.outputs.has_changes == 'true'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform apply -auto-approve tfplan.bin
          echo "✅ Foundation deployed to ${ENVIRONMENT}" >> $GITHUB_STEP_SUMMARY

  # Platform Layer
  platform:
    name: Platform
    needs: [detect-environment, foundation]
    if: |
      always() &&
      !cancelled() &&
      contains(fromJson(needs.detect-environment.outputs.layers_json), 'platform') &&
      (needs.foundation.result == 'success' || needs.foundation.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}
      ROLE_ARN:    ${{ needs.detect-environment.outputs.role_arn }}
      IS_DEPLOY:   ${{ needs.detect-environment.outputs.is_deploy }}
      LAYER:       platform
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_wrapper: false
      
      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/${LAYER}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
      
      - name: Terraform Fmt & Validate
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform fmt -check -recursive
          terraform validate
      
      - name: Terraform Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          set +e
          terraform plan -no-color -out=tfplan.bin -detailed-exitcode
          code=$?
          echo "exit_code=$code" >> $GITHUB_OUTPUT
          
          if [ "$code" -eq 2 ]; then 
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$code" -eq 0 ]; then 
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          else 
            exit "$code"
          fi
      
      - name: Upload Plan
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.ENVIRONMENT }}-${{ env.LAYER }}
          path: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}/tfplan.bin
          if-no-files-found: ignore
          retention-days: 30
      
      - name: Terraform Apply
        if: env.IS_DEPLOY == 'true' && steps.plan.outputs.has_changes == 'true'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform apply -auto-approve tfplan.bin
          echo "✅ Platform deployed to ${ENVIRONMENT}" >> $GITHUB_STEP_SUMMARY

  # Data Layer
  data:
    name: Data
    needs: [detect-environment, foundation, platform]
    if: |
      always() &&
      !cancelled() &&
      contains(fromJson(needs.detect-environment.outputs.layers_json), 'data') &&
      (needs.platform.result == 'success' || needs.platform.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}
      ROLE_ARN:    ${{ needs.detect-environment.outputs.role_arn }}
      IS_DEPLOY:   ${{ needs.detect-environment.outputs.is_deploy }}
      LAYER:       data
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_wrapper: false
      
      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/${LAYER}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
      
      - name: Terraform Fmt & Validate
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform fmt -check -recursive
          terraform validate
      
      - name: Terraform Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          set +e
          terraform plan -no-color -out=tfplan.bin -detailed-exitcode
          code=$?
          echo "exit_code=$code" >> $GITHUB_OUTPUT
          
          if [ "$code" -eq 2 ]; then 
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$code" -eq 0 ]; then 
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          else 
            exit "$code"
          fi
      
      - name: Upload Plan
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.ENVIRONMENT }}-${{ env.LAYER }}
          path: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}/tfplan.bin
          if-no-files-found: ignore
          retention-days: 30
      
      - name: Terraform Apply
        if: env.IS_DEPLOY == 'true' && steps.plan.outputs.has_changes == 'true'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform apply -auto-approve tfplan.bin
          echo "✅ Data deployed to ${ENVIRONMENT}" >> $GITHUB_STEP_SUMMARY

  # Apps Layer
  apps:
    name: Apps
    needs: [detect-environment, foundation, platform, data]
    if: |
      always() &&
      !cancelled() &&
      contains(fromJson(needs.detect-environment.outputs.layers_json), 'apps') &&
      (needs.data.result == 'success' || needs.data.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}
      ROLE_ARN:    ${{ needs.detect-environment.outputs.role_arn }}
      IS_DEPLOY:   ${{ needs.detect-environment.outputs.is_deploy }}
      LAYER:       apps
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_wrapper: false
      
      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${ENVIRONMENT}/${LAYER}/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
      
      - name: Terraform Fmt & Validate
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform fmt -check -recursive
          terraform validate
      
      - name: Terraform Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        continue-on-error: true
        run: |
          set +e
          terraform plan -no-color -out=tfplan.bin -detailed-exitcode
          code=$?
          echo "exit_code=$code" >> $GITHUB_OUTPUT
          
          if [ "$code" -eq 2 ]; then 
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$code" -eq 0 ]; then 
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          else 
            exit "$code"
          fi
      
      - name: Upload Plan
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.ENVIRONMENT }}-${{ env.LAYER }}
          path: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}/tfplan.bin
          if-no-files-found: ignore
          retention-days: 30
      
      - name: Terraform Apply
        if: env.IS_DEPLOY == 'true' && steps.plan.outputs.has_changes == 'true'
        working-directory: environments/${{ env.ENVIRONMENT }}/${{ env.LAYER }}
        run: |
          terraform apply -auto-approve tfplan.bin
          echo "✅ Apps deployed to ${ENVIRONMENT}" >> $GITHUB_STEP_SUMMARY

  # Deployment Summary
  summary:
    name: Summary
    needs: [detect-environment, foundation, platform, data, apps]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "## 🎯 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`${{ needs.detect-environment.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** ${{ needs.detect-environment.outputs.is_deploy == 'true' && '🚀 Deploy' || '✅ Plan Only' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Layer Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Foundation
          if echo '${{ needs.detect-environment.outputs.layers_json }}' | jq -e 'contains(["foundation"])' > /dev/null; then
            if [ "${{ needs.foundation.result }}" == "success" ]; then
              echo "✅ **Foundation:** Success" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.foundation.result }}" == "skipped" ]; then
              echo "⏭️ **Foundation:** Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Foundation:** Failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Platform
          if echo '${{ needs.detect-environment.outputs.layers_json }}' | jq -e 'contains(["platform"])' > /dev/null; then
            if [ "${{ needs.platform.result }}" == "success" ]; then
              echo "✅ **Platform:** Success" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.platform.result }}" == "skipped" ]; then
              echo "⏭️ **Platform:** Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Platform:** Failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Data
          if echo '${{ needs.detect-environment.outputs.layers_json }}' | jq -e 'contains(["data"])' > /dev/null; then
            if [ "${{ needs.data.result }}" == "success" ]; then
              echo "✅ **Data:** Success" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.data.result }}" == "skipped" ]; then
              echo "⏭️ **Data:** Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Data:** Failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Apps
          if echo '${{ needs.detect-environment.outputs.layers_json }}' | jq -e 'contains(["apps"])' > /dev/null; then
            if [ "${{ needs.apps.result }}" == "success" ]; then
              echo "✅ **Apps:** Success" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.apps.result }}" == "skipped" ]; then
              echo "⏭️ **Apps:** Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Apps:** Failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall result
          if [ "${{ needs.foundation.result }}" == "failure" ] || \
             [ "${{ needs.platform.result }}" == "failure" ] || \
             [ "${{ needs.data.result }}" == "failure" ] || \
             [ "${{ needs.apps.result }}" == "failure" ]; then
            echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          fi